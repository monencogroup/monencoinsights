# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2019-02-05 15:55
from __future__ import unicode_literals

import API.models
import ckeditor.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creationDate', models.DateTimeField(default=django.utils.timezone.now)),
                ('leadText', models.TextField()),
                ('title', models.CharField(max_length=250)),
                ('image', models.ImageField(upload_to=API.models.Article.uploadLocation)),
                ('isPersian', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='ArticlePart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(2, 2), (1, 1)])),
                ('order', models.IntegerField()),
                ('title', models.CharField(max_length=250)),
                ('image', models.ImageField(blank=True, default=None, null=True, upload_to=API.models.ArticlePart.uploadLocation)),
                ('content', ckeditor.fields.RichTextField(blank=True, default=None, null=True)),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='API.Article')),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publicPersianName', models.CharField(max_length=200)),
                ('publicName', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('persianName', models.CharField(max_length=200)),
                ('icon', models.ImageField(upload_to=API.models.Category.uploadLocation)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='API.Author')),
                ('bookmarkedArticles', models.ManyToManyField(db_index=True, to='API.Article')),
                ('favoriteCategories', models.ManyToManyField(db_index=True, to='API.Category')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('persianName', models.CharField(max_length=200)),
                ('relatedTags', models.ManyToManyField(db_index=True, to='API.Tag')),
            ],
        ),
        migrations.AddField(
            model_name='article',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='API.Author'),
        ),
        migrations.AddField(
            model_name='article',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='API.Category'),
        ),
        migrations.AddField(
            model_name='article',
            name='tags',
            field=models.ManyToManyField(db_index=True, related_name='articles', related_query_name='article', to='API.Tag'),
        ),
    ]
